AWSTemplateFormatVersion: '2010-09-09'
Description: This stack creates all required load balancers
Parameters:
  Environment:
    Type: String
    Description: Environment Name (DEV)
    AllowedValues: [ 'DEV' ]
  Platform:
    Type: String
    Default: 'GW'
    Description: Platform Name
  VpcStackName:
    Type: String
    Description: Name of the stack which is used to create VPC and Subnets
  SecurityGroupStackName:
    Type: String
    Description: Name of the stack used to create Security Group
Resources:
  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${Environment}-${Platform}-PRIVATE-NLB-01'
      Type: network
      Scheme: internal
      Subnets:
        - Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'PrivateSubnetOne' ] ]
        - Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'PrivateSubnetTwo' ] ]
  NetworkLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${Environment}-${Platform}-NLB-TG-01'
      Port: 80
      Protocol: TCP
      TargetType: alb
      Targets:
        - Id: !Ref AppLoadBalancer
          Port: 80
      VpcId:
        Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'VPCId' ] ]
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
  NetworkLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NetworkLoadBalancerTargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: '80'
      Protocol: TCP

  # Application load balancer for getting traffic to containers
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${Environment}-${Platform}-PRIVATE-ALB-02'
      Type: application
      Scheme: internal
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '60'
      Subnets:
        - Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'PrivateSubnetOne' ] ]
        - Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'PrivateSubnetTwo' ] ]
      SecurityGroups:
        - Fn::ImportValue: !Join [':', [!Ref 'SecurityGroupStackName', 'LoadBalancerSecurityGroupId']]

  # Load balancer listener
  AppLoadBalancerListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - AppLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'AppLoadBalancerHttpDummyTG'
          Type: 'forward'
      LoadBalancerArn: !Ref 'AppLoadBalancer'
      Port: 80
      Protocol: HTTP

  # When metadata container comes up, it will register in this target group
  MetadataTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${Environment}-${Platform}-METADATA-TG-02'
      HealthCheckIntervalSeconds: 150
      HealthCheckPath: /actuator/health
      HealthCheckPort: 8081
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: ip
      Port: 8080
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      VpcId:
        Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'VPCId' ] ]
  TokenLoadBalancerRuleHttp:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - TargetGroupArn: !Ref 'MetadataTargetGroup'
        Type: 'forward'
      Conditions:
      - Field: path-pattern
        Values: ['/api/v1/metadata/*']
      ListenerArn: !Ref AppLoadBalancerListenerHttp
      Priority: 1

  # This target group is used to set up the LB to just drop traffic initially, before any real service target groups have been added
  AppLoadBalancerHttpDummyTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${Environment}-${Platform}-DUMMY-TG-03'
      HealthCheckIntervalSeconds: 150
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'VPCId' ] ]
Outputs:
  NetworkLoadBalancerDNS:
    Description: Network Load Balancer DNS Name
    Value: !GetAtt 'NetworkLoadBalancer.DNSName'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'NetworkLoadBalancerDNS' ] ]
  NetworkLoadBalancerARN:
    Description: Network Load Balancer ARN
    Value: !Ref 'NetworkLoadBalancer'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'NetworkLoadBalancerARN' ] ]
  NetworkLoadBalancerTargetGroup:
    Description: Load Balancer DNS Name
    Value: !Ref 'NetworkLoadBalancerTargetGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'NLBTargetGroupArn' ] ]
  LoadBalancerDNS:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt 'AppLoadBalancer.DNSName'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'LoadBalancerDNS' ] ]
  MetadataTargetGroup:
    Description: Metadata target group arn
    Value: !Ref MetadataTargetGroup
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'MetadataTargetGroupArn' ] ]
